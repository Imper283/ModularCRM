Модулю нужен "info.json" файл, который отвечае за то как будет обрабатываться модуль парсером.
Далее будет подробно разобрана структура этого файла.
{
    "name": "template",
    "type": "",
    "status": "disabled",
    "roleAny": true,
    "roles": ["admin"],
    "dependency": [],
    "npmModuleDependency": [],
    "permissions": ["DataBase"]
}
"name" - Указывается название модуля. Название должно быть уникальным чтобы избежать перезаписи модулей.
"type" - Описывает тип модуля. Исключительно семантический тэг, нужный для организации модулей.
    "tool" - Функциональное мини-приложение доступное в основном приложении.
    "utility" - Исполнение функционала в самом приложение без интерфейса.
    "lib" - Библиотека для расширения функционала других модулей.
    Можно указать и другие типы, это повлияет только на внешний менеджер модулей.
"status" - Отвечает за то как будет парсер считывать модуль.
    "disabled" - Модуль будет проигнорирован парсерсом модулей, и не будет загружен.
    ? "check" - Модуль будет проверен на наличие ошибок, и не будет загружаться в систему.
    ? "enabledUnstrict" - Загрузка и включение модуля. Появление ошибок будет отображено, но модуль
        всё равно будет загружен в систему.
    "enabled" - Стандартная загрузка модуля.

"roleAny" - По умолчанию false. Определяет, нужно ли проверять роль пользователя на получение доступа к модулю. Если указано true, то указывать поле "roles" необязательно.
"roles" - Перечисление ролей, которым доступен этот модуль.
!Примечание: Роли указанные в модуле, не определяют то какая роль может пользоваться инструментами модуля, а только за то, какие роли могут обращаться на ендпоинты создаваемые
    этим модулем!!! В остальных случаях, весь внутренний функционал модуля на стороне сервера, исполняется внезависимости от ролей, а лишь регулируют права доступа к реализации
    функционала модуля со стороны пользователей. Т.е. если модуль с ролью "admin" создаёт инструмент c ролью "manager", то пользователь с ролью "manager" может получить доступ к
    инструменту, но в случае обращения к API модуля, он получит ошибку прав доступа.
    Данный ньюанс не стоит использовать для разграничений прав доступа относительно модуля, для этих целей используйте библиотеку RoleManager.

"dependency" - Здесь указываются названия модулей, которые необходимы для работы загружаемого модуля. В случае отстутствия таковых, модуль не будет загружен.
"npmModuleDependency" - Здесь указываются какие модули npm, требует этот модуль, для работы. В случае отстутствия таковых, модуль не будет загружен.
!Примечание: Дополнительно стоит учесть, что модуль требующий других модулей для работы, автоматически получает права доступа для их использования по умолчанию.
    Если вы хотите избежать данного поведения, укажите поле "autoPermitDependency: false"

Если чтение модуля было выполнено корректно, запускаются скрипты из папки "scripts" модуля.
Исполнение скрипта модуля, требует чёткого названия функции внутри файла, и он соответствует названию
скрипта модуля. Т.е. в скрипте с названием "onLoad.js" исполняется функция "onLoad()", то же самое
действует и в "decomposed" режиме, только все функции находятся в одном файле.

Если модуль имеет доступ к исполнению любого кода на стороне сервера, то он будет исполняться как
часть серверного кода, и иметь доступ ко всем библиотекам сервера и исполнению любого кода на нём.
В ином случае, любое начало исполнения кода будет вызывать функцию

Далее, мы рассмотрим существующие события скрипта.
    "load" - Исполняется при загрузке модуля.
    "init" - Исполняется после завершения загрузки всех модулей.
    "toolLoad" - Исполняется при загрузки пользователем мини-приложения.
        Получает как аргумент, класс пользователя.
    "toolInteractions" - Должен возвращать список функций. Расширяет маршрутизацию мини-приложения,
        по пути обращения к модулю. Названия функции будет использоваться как название маршрута.

API приложения, представляет из себя класс "App", к которому может обращаться любой скрипт модуля.
App - Параметры
    db - Возвращает класс, имеющий в себе функции и методы для взаимодействия с БД.
App - функции
    registerHub - Устанавливает по указанному пути интерфейс основного приложения.
        Аргумент 1 - Строка - Путь до html файла.
    registerTool - Добавляет по указанному пути мини-приложение в общую систему.
        Аргумент 1 - Строка - Путь до директории.
    getStorageData
    setStorageData
    